{
	"info": {
		"_postman_id": "72ee65c4-52dd-41c8-bdcd-dd5ad48cd8a9",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// #1 отправляем запрос нажав кнопку \"Send\"\r",
							"\r",
							"// #2 Статус код 200\r",
							"pm.test(\"check status\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"// #3 Проверить, что в body приходит правильный string.\r",
							"pm.test(\"check_response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// #1 отправляем запрос нажав кнопку \"Send\"\r",
							"\r",
							"// #2 Статус код 200\r",
							"pm.test(\"check status\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"// #3 Спарсить response body в json.\r",
							"var json = pm.response.json()\r",
							"console.log(\"Json_RESPONSE =\", json)\r",
							"\r",
							"// #4 Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"checkName\", function () {\r",
							"    pm.expect(json.name).to.eql(\"Deni\");\r",
							"});\r",
							"\r",
							"// #5 Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"checkAge\", function () {\r",
							"    pm.expect(json.age).to.eql(\"24\");\r",
							"});\r",
							"\r",
							"// #6 Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"checkSalary\", function () {\r",
							"    pm.expect(json.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// #7 Спарсить request\r",
							"jsonReq = request.data\r",
							"console.log(\"Json_REQUEST =\", jsonReq)\r",
							"\r",
							"// #8 Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"checkName\", function (){\r",
							"    pm.expect(json.name).to.eql(jsonReq.name)\r",
							"})\r",
							"\r",
							"// #9 Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"checkAge\", function () {\r",
							"    pm.expect(json.age).to.eql(jsonReq.age)\r",
							"})\r",
							"\r",
							"// #10 Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"checkSalary\", function () {\r",
							"    pm.expect(json.salary).to.eql(parseInt(jsonReq.salary))\r",
							"})\r",
							"\r",
							"// #11 Вывести в консоль параметр family из response\r",
							"console.log(json.family)\r",
							"\r",
							"// #12 Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"checkSalaryAfter1.5year\", function() {\r",
							"    reqSalary = jsonReq.salary * 4\r",
							"    pm.expect(json.family.u_salary_1_5_year).to.eql(reqSalary)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Deni",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// #1 Отправляем реквест \"Send\"\r",
							"\r",
							"// #2 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// #3 Спарсить response body в json\r",
							"var parsing = pm.response.json()\r",
							"console.log(parsing)\r",
							"\r",
							"// #4 парсим request в json\r",
							"var parseToReq = pm.request.url.query.toObject()\r",
							"console.log(\"Parse_REQUEST =\", parseToReq)\r",
							"\r",
							"// #5 Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"nameTest\", function () {\r",
							"    pm.expect(parsing.name).to.eql(parseToReq.name);\r",
							"});\r",
							"\r",
							"console.log(\"RESPONSE_NAME\", parsing.name)\r",
							"console.log(\"REQ_NAME\", parseToReq.name)\r",
							"\r",
							"// #6 Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"ageTest\", function () {\r",
							"    pm.expect(parsing.age).to.eql(parseToReq.age);\r",
							"});\r",
							"\r",
							"\r",
							"// #7 Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salaryTest\", function () {\r",
							"    pm.expect(parsing.salary).to.eql(parseInt(parseToReq.salary));\r",
							"});\r",
							"\r",
							"// #8  Вывести в консоль параметр family из response\r",
							"console.log(\"family = \", parsing.family)\r",
							"\r",
							"\r",
							"\r",
							"// #9  Проверить, что у параметра dog есть параметры name \r",
							"pm.test(\"dogNamet\", function () {\r",
							"    var dog = parsing.family.pets.dog;\r",
							"    pm.expect(dog).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"// #10 Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"dogAge\", function () {\r",
							"    var dog1 = parsing.family.pets.dog;\r",
							"    pm.expect(dog1).to.have.property(\"age\")\r",
							"})\r",
							"\r",
							"// #11 Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"dogName\", function () {\r",
							"    var dog1 = parsing.family.pets.dog.name;\r",
							"    pm.expect(dog1).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"// #12 Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"dogAge\", function () {\r",
							"    var dog1 = parsing.family.pets.dog.age;\r",
							"    pm.expect(dog1).to.eql(4)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Deni&age=24&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Deni"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// #1 Отправляем реквест \"Send\"\r",
							"\r",
							"// #2  Статус код 200\r",
							"pm.test(\"Status code\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"// #3 Спарсить response body в json\r",
							"parseResp = pm.response.json()\r",
							"console.log(parseResp)\r",
							"\r",
							"// #4 Спарсить request\r",
							"parseReq = pm.request.url.query.toObject()\r",
							"console.log(parseReq)\r",
							"\r",
							"// #5 Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"checkName\", function () {\r",
							"    pm.expect(parseResp.name).to.eql(parseReq.name)\r",
							"})\r",
							"\r",
							"// #6 Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"checkAge\", function () {\r",
							"    pm.expect(parseResp.age).to.eql(parseInt(parseReq.age))\r",
							"})\r",
							"\r",
							"// #7 Вывести в консоль параметр salary из request\r",
							"console.log(parseReq.salary)\r",
							"\r",
							"// #8 Вывести в консоль параметр salary из response\r",
							"console.log(parseResp.salary)\r",
							"\r",
							"// #9  Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(\"Salary [0] = \" + parseResp.salary[0])\r",
							"\r",
							"// #10 Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log(\"Salary [1] = \" + parseResp.salary[1])\r",
							"\r",
							"// #11 Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log(\"Salary [2] = \" + parseResp.salary[2])\r",
							"\r",
							"// #12 Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check [0] element\", function () {\r",
							"    pm.expect(parseResp.salary[0]).to.eql(parseInt(parseReq.salary))\r",
							"})\r",
							"\r",
							"// #13 Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check [1] element\", function () {\r",
							"pm.collectionVariables.get(\"variable_key\");\r",
							"    pm.expect(parseInt(parseResp.salary[1])).to.eql(parseReq.salary * 2)\r",
							"})\r",
							"\r",
							"// #14 Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check [2] element\", function () {\r",
							"    pm.expect(parseInt(parseResp.salary[2])).to.eql(parseReq.salary * 3)\r",
							"})\r",
							"\r",
							"// #15 Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Deni\");\r",
							"\r",
							"// #16 Создать в окружении переменную age\r",
							"\r",
							"\r",
							"// #17 Создать в окружении переменную salary\r",
							"\r",
							"\r",
							"// #18 Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Deni\")\r",
							"\r",
							"// #19 Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 24)\r",
							"\r",
							"// #20 Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 1000)\r",
							"\r",
							"//console.log(parseResp.salary)\r",
							"\r",
							"// #21 Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var array = parseResp.salary.length\r",
							"var array1 = parseResp.salary\r",
							"\r",
							"for (var i = 0; i < array; i++){\r",
							"    console.log(array1[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Deni&age=24&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Deni"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// #1  Вставить параметр salary из окружения в request\r",
							"    // Заходим в body  и в value вставляем {{salary}}\r",
							"\r",
							"// #2 Вставить параметр age из окружения в age\r",
							"    // Заходим в body  и в value вставляем {{age}}\r",
							"\r",
							"// #3 Вставить параметр name из окружения в name\r",
							"    // Заходим в body  и в value вставляем {{name}}\r",
							"\r",
							"// #4 Отправить запрос.\r",
							"// нажимаем кнопку \"Send\"\r",
							"\r",
							"// #5 Статус код 200\r",
							"pm.test(\"status code is 200\", function (){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"// #6 Спарсить response body в json\r",
							"var parseResp = pm.response.json()\r",
							"console.log(\"RESPONSE = \", parseResp)\r",
							"\r",
							"// #7 Спарсить request\r",
							"var parseReq = request.data\r",
							"console.log(\"REQUEST = \", parseReq)\r",
							"\r",
							"// #8 Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check qa salary through response\", function (){\r",
							"    pm.expect(parseResp).to.haveOwnProperty(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"// #9 Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(parseResp).to.haveOwnProperty(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"// #10 Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\",function () {\r",
							"    pm.expect(parseResp).to.haveOwnProperty(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"// #11 Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function (){\r",
							"    pm.expect(parseResp).to.haveOwnProperty(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"// #12 Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(parseResp).to.haveOwnProperty(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"// #13  Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function() {\r",
							"    pm.expect(parseResp).to.haveOwnProperty(\"person\")\r",
							"})\r",
							"\r",
							"// #14 Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(parseResp.start_qa_salary).to.eql(parseInt(parseReq.salary))\r",
							"})\r",
							"\r",
							"// #15  Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(parseResp.qa_salary_after_6_months).to.eql(parseReq.salary * 2)\r",
							"})\r",
							"\r",
							"// #16 Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(parseResp.qa_salary_after_12_months).to.eql(parseReq.salary * 2.7)\r",
							"})\r",
							"\r",
							"// #17 Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(parseResp[\"qa_salary_after_1.5_year\"]).to.eql(parseReq.salary * 3.3)\r",
							"})\r",
							"\r",
							"// #18  Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(parseResp[\"qa_salary_after_3.5_years\"]).to.eql(parseReq.salary * 3.8)\r",
							"})\r",
							"\r",
							"// #19  Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"hard test\", function (){\r",
							"    pm.expect(parseResp.person.u_name[1]).to.eql(parseInt(parseReq.salary))\r",
							"})\r",
							"\r",
							"// #20 Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"hard test 1\", function() {\r",
							"    pm.expect(parseResp.person.u_age).to.eql(parseInt(parseReq.age))\r",
							"})\r",
							"\r",
							"// #21 Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"hard test 2\", function () {\r",
							"    pm.expect(parseResp.person.u_salary_5_years).to.eql(parseReq.salary * 4.2)\r",
							"})\r",
							"\r",
							"\r",
							"// #22  ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var array = parseResp.person.length\r",
							"var array1 = parseResp.person\r",
							"console.log(\"array\", array1)\r",
							"\r",
							"var p = Object.values(array1) // парсим объект в массив\r",
							"console.log(p)\r",
							"\r",
							"//!!!!! так как из ДЗ не совсем понятно какой результат в цикле должен выводиться, то я реализовал два цикла с разным результатом:\r",
							"\r",
							"// первая реализация цикла\r",
							"p.forEach(element => console.log(\"the first loop\", element));\r",
							"\r",
							"// вторая реализация цикла\r",
							"for (i = 0; i < p.length; i++) {\r",
							"    for (j = 0; j < p[i].length; j++) {\r",
							"         console.log(\"the second loop: \", p[i][j]);\r",
							"    }\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}